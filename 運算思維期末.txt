<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Chatroom with Gemini API</title>
    <style>
        body {
            color: rgb(228, 189, 81);
            font-family: 'Courier New', Courier, monospace;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background: #7cc8f4;
            /* Default background in case image doesn't load */
        }

        #backgroundWrapper {
            width: 80vw;
            /* Use viewport width units */
            max-width: 800px;
            /* Maximum width remains 800px */
            height: 80vw;
            /* Height is set to be the same in viewport width units, approximating the width */
            max-height: 800px;
            /* Maximum height to match the maximum width */
            display: flex;
            justify-content: center;
            align-items: flex-end;
            background-image: url('./img/giphy.gif');
            /* Replace with your image path */
            background-size: contain;
            /* Ensures the image is fully visible without stretching */
            background-repeat: no-repeat;
            background-position: center bottom;
        }

        #gameContainer {
            width: 100%;
            /* Takes the full width of the background wrapper */
            height: 200px;
            /* Adjusted height to position at the bottom of the image */
            background: rgba(0, 0, 0, 0.8);
            /* Semi-transparent black background */
            padding: 10px;
            display: none;
            box-sizing: border-box;
            border: 1px solid #fff;
            overflow: hidden;
        }

        #messages {
            height: 80%;
            overflow-y: auto;
            margin-bottom: 10px;
        }

        .message {
            margin: 5px 0;
        }

        .userMessage {
            color: #0f0;
        }

        .botMessage {
            color: #ff0;
        }

        #messageInput {
            width: 100%;
            padding: 10px;
            box-sizing: border-box;
            background: transparent;
            border: none;
            border-top: 1px solid #fff;
            color: white;
            font-size: 16px;
        }

        #startButton, #introButton {
            padding: 15px 30px;
            /* Increase padding for a better look */
            font-size: 20px;
            /* Adjust font size */
            cursor: pointer;
            /* Position it within the wrapper */
            margin-bottom: 20px;
            color: white;
            /* Text color */
            background: rgba(0, 0, 0, 0.8);
            /* Same semi-transparent background as introBlock */
            border: 1px solid #fff;
            /* Same border as introBlock */
            border-radius: 5px;
            /* Rounded corners similar to introBlock */
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);
            /* Subtle shadow for depth */
            transition: all 0.3s ease;
            /* Smooth transition for hover effects */
        }

        #startButton:hover,
        #introButton:hover {
            background: rgba(0, 0, 0, 1);
            /* Darker background on hover */
            box-shadow: 0px 6px 15px rgba(0, 0, 0, 0.5);
            /* Slightly larger shadow on hover */
            transform: scale(1.05);
            /* Slightly enlarge on hover */
        }

        #introBlock {
            width: 80%;
            max-width: 600px;
            background: rgba(0, 0, 0, 0.8);
            /* Semi-transparent background */
            padding: 20px;
            box-sizing: border-box;
            border: 1px solid #fff;
            margin-bottom: 20px;
            /* Space between intro block and start button */
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            display: none;
            /* Initially hidden */
        }
    </style>
</head>

<body>
    <div id="introBlock">
        <h2>呀勒呀勒，不聽話的大小姐。快點選一個夢境入睡吧! </h2>
        <p>您的執事們為了哄您入睡，特地從異國聘請一位會調製夢境藥水的魔法師。</p>
        <p>每到一個新夢境，您都能選擇一瓶新的藥水喝下，而每瓶藥水都將帶來不同的夢境和體驗。</p>
        <button id="startButton">Start Game</button>
    </div>
    <div id="backgroundWrapper">
        <button id="introButton">遊戲介紹</button>
        <div id="gameContainer">
            <div id="messages"></div>
            <form id="messageForm">
                <input type="text" id="messageInput" placeholder="Type your command...">
            </form>
        </div>
    </div>

</body>
<script>
    var conversationHistory = [];

    var apiKey = prompt("AIzaSyAodxCTWurUllP2ah-43UMCsOR46tSoWlA", "");
    var userName = prompt("Nora", "");

    if (!apiKey || !userName) {
        alert("API key and name are required to use the chatroom.");
        // Optionally, redirect or disable form
    } else {
        document.getElementById('messageForm').addEventListener('submit', function (event) {
            event.preventDefault();
            var inputElement = document.getElementById('messageInput');
            var message = inputElement.value;

            addToConversationHistory('user', message);
            displayMessage(message, 'user');
            inputElement.disabled = true;
            fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=' + apiKey, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    "contents": conversationHistory,
                    "safetySettings": [
                        {
                            "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                            "threshold": "BLOCK_NONE"
                        },
                        {
                            "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                            "threshold": "BLOCK_NONE"
                        },
                    ],
                    "generationConfig": {
                        "stopSequences": [
                            ""
                        ],
                        "temperature": 2.0,
                        "maxOutputTokens": 2048,
                        "topP": 0.8,
                        "topK": 10
                    }
                })
            })
                .then(response => response.json())
                .then(data => {
                    var responseText = data.candidates[0].content.parts[0].text;
                    addToConversationHistory('model', responseText);
                    displayMessage(responseText, 'bot');
                    inputElement.disabled = false;
                })
                .catch(error => {
                    console.error('Error:', error)
                    inputElement.disabled = false;
                });

            document.getElementById('messageInput').value = '';
        });
    }

    function addToConversationHistory(role, text) {
        conversationHistory.push({
            "role": role,
            "parts": [{
                "text": text
            }]
        });
    }

    function displayMessage(message, sender) {
        var messageElement = document.createElement('div');
        var formatMessage = formatText(message);
        messageElement.classList.add('message');
        if (sender === 'user') {
            messageElement.classList.add('userMessage');
        } else {
            messageElement.classList.add('botMessage');
        }
        document.getElementById('messages').appendChild(messageElement);
        updateSceneImage(message);
        // Function to display the text one character at a time
        function typeText(element, text, index) {
            if (index < text.length) {
                let char = text[index];
                if (char === '<') {
                    let endIndex = text.indexOf('>', index);
                    if (endIndex !== -1) {
                        element.innerHTML += text.substring(index, endIndex + 1);
                        index = endIndex + 1;
                    }
                } else {
                    element.innerHTML += char;
                    index++;
                }
                setTimeout(function () {
                    typeText(element, text, index);
                }, 75); // Adjust typing speed by changing the delay (in milliseconds)
            } else {
                // Scroll to bottom after the entire message is displayed
                document.getElementById('messages').scrollTop = document.getElementById('messages').scrollHeight;
            }
        }

        // Start typing the formatted message
        typeText(messageElement, formatMessage, 0);
    }

    function updateSceneImage(responseText) {
        let sceneMatch = responseText.match(/場景：(.*?)\s/); // 使用正則表達式匹配場景描述
        if (sceneMatch && sceneMatch[1]) {
            let scene = sceneMatch[1];
            console.log(scene);
            // 檢查scene是否包含"宿舍"
            if (scene.includes("深林秘境")) {
                document.getElementById('backgroundWrapper').style.backgroundImage = "url('./img/dorm.jpeg')";
            } else if (scene.includes("棉花糖瀑布")) {
                document.getElementById('backgroundWrapper').style.backgroundImage = "url('./img/party.jpeg')";
            } else if (scene.includes("白鹿靈湖")) {
                document.getElementById('backgroundWrapper').style.backgroundImage = "url('./img/library.jpeg')";
            }
        }
    }

    function formatText(text) {
        // Replace ** with a new line and bold tag
        let formattedText = text.replace(/\*\*(.*?)\*\*/g, '<br><strong>$1</strong>');

        // Replace * with a new line and bullet point
        formattedText = formattedText.replace(/\*(.*?)\s/g, '<br>$1');

        return formattedText;
    }

    document.getElementById('introButton').addEventListener('click', function () {
        document.getElementById('introBlock').style.display = 'block';
        this.style.display = 'none'; // Hide the intro button
        document.getElementById('startButton').style.display = 'block'; // Show the start button
    });

    document.getElementById('startButton').addEventListener('click', function () {
        // Change background image and display settings when starting the game
        document.getElementById('backgroundWrapper').style.backgroundImage = "url('./img/dorm.jpeg')";
        document.getElementById('introBlock').style.display = 'none'; // Show the game container
        document.getElementById('gameContainer').style.display = 'inline';
        document.getElementById('introButton').style.display = 'none'; // Hide the start button

        conversationHistory.push({
            "role": 'user',
            "parts": [{
                "text": `腳本：
                        """
                        遊戲標題：夢選之境
                        遊戲背景
                        ${userName}是一位調皮搗蛋的大小姐，執事們為了讓{userName}每晚都能乖乖入睡，特地從異國聘請一位會調製夢境藥水的魔法師。遊戲通過${userName}的互動和選擇來探索未知的環境。

                        主要角色：
                        ${userName}：主角，調皮搗蛋的大小姐。
                        金桐儇：${userName}的精靈顧問，會給出的奇葩卻有用的建議。
                        明狗狗：${userName}的隨行寵物，雖然愛捉弄人，但機靈勇敢。
                        遊戲腳本流程

                        開場：
                        （場景：深林秘境）
                        桐儇邀請${userName}參加春季的棉花糖大胃王比賽。
                        選擇A：接受邀請。
                        選擇B：婉拒，說自己想吃別的。

                        比賽中的互動：
                        （場景：棉花糖瀑布）
                        若選擇A，${userName}抵達盛大的比賽場地，看到瀑布灑下各式各樣的棉花糖。其他參賽者們正摩拳擦嘴，等待比賽的開始。
                         選擇A1：跟桐儇擬定作戰計畫，並提醒明狗狗不能吃棉花糖。（選擇後進入白鹿靈湖劇情）
                         選擇A2：其他參賽者看起來太厲害，所以帶著明狗狗怯場離席。（選擇後進入白鹿靈湖劇情）

                        若選擇B，${userName}因為不知道要去那兒玩，所以明狗狗叼出藥水。
                         選擇B1：喝下白色藥水，獲得透視功能，發現隱藏在瀑布後的祕密湖畔。（選擇後進入白鹿靈湖劇情）
                         選擇B2：喝下橘色藥水，獲得瞬間移動的能力，並看到精靈們在白鹿靈湖佈置頒獎典禮。（選擇後進入白鹿靈湖劇情）

                        授勛之地：
                        （場景：白鹿靈湖）
                        ${userName}來到了白鹿靈湖。
                        ${userName}對眼前的景象感到敬畏和好奇。
                        選擇A：尋找傳說中的魔法泉水，帶回去送給魔法師。（選擇後進入結局，根據玩家的選擇進行反思及回顧）
                        選擇B：深怕踩到了什麼，而一動也不動。（選擇後進入結局，根據玩家的選擇進行反思及回顧）

                        結局：
                        開放表達結局：如果${userName}勇於面對和探索，選擇（A1和A），他將會有所收穫。

                        壓抑感受結局：如果${userName}因為害怕犯錯而不嘗試，選擇（A2和B），他將會錯失特別的體驗。

                        遊戲結尾
                        遊戲最後將根據${userName}的選擇提供一段反思，強調在人在面對挑戰時，不要先害怕，勇於嘗試通常都有好結局或意想不到的收穫。"""

                        請根據腳本中的對話，根據"""開場"""到"""比賽中的互動"""最後到"""授勛之地"""進行，開始一個文字冒險遊戲，每一次的對話，都需要呈現以下格式與資訊：
                        <場景>：目前故事的背景為何
                        <選擇>：在每一次的對話中，你都會根據腳本給我可以選擇的動作，根據我選擇的動作繼續接下來的劇情，整體劇情會圍繞腳本發展。

                        根據我的選擇進行故事就好，不要幫我做出選擇`
            }]
        })
        fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=' + apiKey, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                "contents": conversationHistory,
                "safetySettings": [
                    {
                        "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                        "threshold": "BLOCK_NONE"
                    },
                    {
                        "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                        "threshold": "BLOCK_NONE"
                    },
                ],
                "generationConfig": {
                    "stopSequences": [
                        ""
                    ],
                    "temperature": 2.0,
                    "maxOutputTokens": 2048,
                    "topP": 0.8,
                    "topK": 10
                }
            })
        })
            .then(response => response.json())
            .then(data => {
                console.log(conversationHistory);
                var responseText = data.candidates[0].content.parts[0].text;
                addToConversationHistory('model', responseText);
                displayMessage(responseText, 'bot');
            })
            .catch(error => console.error('Error:', error));
    });



</script>

</html>